{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"DEPLOYMENT/","title":"\ud83d\ude80 Manual de Deploy e Produ\u00e7\u00e3o","text":""},{"location":"DEPLOYMENT/#deploy-em-producao","title":"\ud83c\udf10 Deploy em Produ\u00e7\u00e3o","text":""},{"location":"DEPLOYMENT/#pre-requisitos-para-producao","title":"Pr\u00e9-requisitos para Produ\u00e7\u00e3o","text":"<ul> <li>Servidor Linux (Ubuntu 20.04+ ou CentOS 8+)</li> <li>Python 3.8+</li> <li>PostgreSQL 12+</li> <li>Redis 6+</li> <li>Nginx (proxy reverso)</li> <li>Supervisor (gerenciamento de processos)</li> <li>SSL Certificate (Let's Encrypt recomendado)</li> </ul>"},{"location":"DEPLOYMENT/#preparacao-do-servidor","title":"Prepara\u00e7\u00e3o do Servidor","text":""},{"location":"DEPLOYMENT/#1-atualizacao-do-sistema","title":"1. Atualiza\u00e7\u00e3o do Sistema","text":"<pre><code># Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# CentOS/RHEL\nsudo yum update -y\n</code></pre>"},{"location":"DEPLOYMENT/#2-instalacao-de-dependencias","title":"2. Instala\u00e7\u00e3o de Depend\u00eancias","text":"<pre><code># Ubuntu/Debian\nsudo apt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib redis-server supervisor git\n\n# CentOS/RHEL\nsudo yum install -y python3 python3-pip nginx postgresql postgresql-server redis supervisor git\n</code></pre>"},{"location":"DEPLOYMENT/#3-configuracao-do-postgresql","title":"3. Configura\u00e7\u00e3o do PostgreSQL","text":"<pre><code># Inicializar PostgreSQL (CentOS)\nsudo postgresql-setup initdb\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Ubuntu (j\u00e1 iniciado automaticamente)\nsudo systemctl enable postgresql\n\n# Criar banco e usu\u00e1rio\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE scada_prod;\nCREATE USER scada_user WITH PASSWORD 'SuaSenhaForteAqui123!';\nGRANT ALL PRIVILEGES ON DATABASE scada_prod TO scada_user;\nALTER USER scada_user CREATEDB;\n\\q\nEOF\n</code></pre>"},{"location":"DEPLOYMENT/#4-configuracao-do-redis","title":"4. Configura\u00e7\u00e3o do Redis","text":"<pre><code># Iniciar e habilitar Redis\nsudo systemctl start redis\nsudo systemctl enable redis\n\n# Configurar Redis para produ\u00e7\u00e3o\nsudo cp /etc/redis/redis.conf /etc/redis/redis.conf.backup\nsudo sed -i 's/# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf\nsudo sed -i 's/# maxmemory &lt;bytes&gt;/maxmemory 512mb/' /etc/redis/redis.conf\nsudo systemctl restart redis\n</code></pre>"},{"location":"DEPLOYMENT/#deploy-da-aplicacao","title":"Deploy da Aplica\u00e7\u00e3o","text":""},{"location":"DEPLOYMENT/#1-preparacao-do-usuario-de-deploy","title":"1. Prepara\u00e7\u00e3o do Usu\u00e1rio de Deploy","text":"<pre><code># Criar usu\u00e1rio para a aplica\u00e7\u00e3o\nsudo useradd -m -s /bin/bash scada\nsudo usermod -aG sudo scada  # Se necess\u00e1rio acesso sudo\n\n# Trocar para usu\u00e1rio scada\nsudo su - scada\n</code></pre>"},{"location":"DEPLOYMENT/#2-clone-e-configuracao","title":"2. Clone e Configura\u00e7\u00e3o","text":"<pre><code># Clonar reposit\u00f3rio\ngit clone https://github.com/seu-usuario/CLP_TCC2.git /opt/scada\ncd /opt/scada\n\n# Criar ambiente virtual\npython3 -m venv venv\nsource venv/bin/activate\n\n# Instalar depend\u00eancias de produ\u00e7\u00e3o\npip install --upgrade pip\npip install -r requirements/production.txt\n</code></pre>"},{"location":"DEPLOYMENT/#3-configuracao-de-ambiente","title":"3. Configura\u00e7\u00e3o de Ambiente","text":"<pre><code># Criar arquivo de configura\u00e7\u00e3o de produ\u00e7\u00e3o\ncat &gt; .env &lt;&lt; EOF\nFLASK_ENV=production\nSECRET_KEY=$(python -c 'import secrets; print(secrets.token_hex(32))')\nENCRYPTION_KEY=$(python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())')\n\n# Banco de dados\nDATABASE_URL=postgresql://scada_user:SuaSenhaForteAqui123!@localhost/scada_prod\n\n# Redis\nREDIS_URL=redis://localhost:6379/0\n\n# Email (configurar com seu provedor)\nMAIL_SERVER=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USE_TLS=True\nMAIL_USERNAME=seu-email@empresa.com\nMAIL_PASSWORD=sua-senha-de-app\n\n# Configura\u00e7\u00f5es de produ\u00e7\u00e3o\nSESSION_COOKIE_SECURE=True\nWTF_CSRF_ENABLED=True\nEOF\n\n# Proteger arquivo de configura\u00e7\u00e3o\nchmod 600 .env\n</code></pre>"},{"location":"DEPLOYMENT/#4-inicializacao-do-banco","title":"4. Inicializa\u00e7\u00e3o do Banco","text":"<pre><code># Inicializar banco de dados\npython scripts/init_db.py\n\n# Executar migra\u00e7\u00f5es se existirem\nflask db upgrade\n</code></pre>"},{"location":"DEPLOYMENT/#5-teste-da-aplicacao","title":"5. Teste da Aplica\u00e7\u00e3o","text":"<pre><code># Testar se a aplica\u00e7\u00e3o inicia\npython wsgi.py\n\n# Testar endpoints b\u00e1sicos\ncurl http://localhost:5000/api/health\n</code></pre>"},{"location":"DEPLOYMENT/#configuracao-do-nginx","title":"Configura\u00e7\u00e3o do Nginx","text":""},{"location":"DEPLOYMENT/#1-configuracao-do-site","title":"1. Configura\u00e7\u00e3o do Site","text":"<pre><code>sudo tee /etc/nginx/sites-available/scada &lt;&lt; 'EOF'\nupstream scada_app {\n    server 127.0.0.1:5000;\n    server 127.0.0.1:5001 backup;\n}\n\nserver {\n    listen 80;\n    server_name seu-dominio.com www.seu-dominio.com;\n\n    # Redirect HTTP to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name seu-dominio.com www.seu-dominio.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/seu-dominio.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/seu-dominio.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options DENY;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\";\n\n    # Logs\n    access_log /var/log/nginx/scada_access.log;\n    error_log /var/log/nginx/scada_error.log;\n\n    # Static files\n    location /static/ {\n        alias /opt/scada/app/static/;\n        expires 30d;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # WebSocket support\n    location /socket.io/ {\n        proxy_pass http://scada_app;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Application\n    location / {\n        proxy_pass http://scada_app;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n\n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 8 4k;\n        proxy_busy_buffers_size 8k;\n    }\n\n    # Health check\n    location /health {\n        access_log off;\n        proxy_pass http://scada_app;\n    }\n}\nEOF\n\n# Habilitar site\nsudo ln -s /etc/nginx/sites-available/scada /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\n\n# Testar configura\u00e7\u00e3o\nsudo nginx -t\n\n# Reiniciar Nginx\nsudo systemctl restart nginx\nsudo systemctl enable nginx\n</code></pre>"},{"location":"DEPLOYMENT/#2-ssl-com-lets-encrypt","title":"2. SSL com Let's Encrypt","text":"<pre><code># Instalar Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obter certificado SSL\nsudo certbot --nginx -d seu-dominio.com -d www.seu-dominio.com\n\n# Configurar renova\u00e7\u00e3o autom\u00e1tica\nsudo crontab -e\n# Adicionar linha:\n0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"DEPLOYMENT/#configuracao-do-supervisor","title":"Configura\u00e7\u00e3o do Supervisor","text":""},{"location":"DEPLOYMENT/#1-configuracao-da-aplicacao-principal","title":"1. Configura\u00e7\u00e3o da Aplica\u00e7\u00e3o Principal","text":"<pre><code>sudo tee /etc/supervisor/conf.d/scada.conf &lt;&lt; 'EOF'\n[program:scada]\ncommand=/opt/scada/venv/bin/gunicorn --bind 127.0.0.1:5000 --workers 4 --worker-class eventlet --worker-connections 1000 --timeout 60 --keepalive 2 --max-requests 1000 --max-requests-jitter 50 wsgi:app\ndirectory=/opt/scada\nuser=scada\ngroup=scada\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/supervisor/scada.log\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\nenvironment=PATH=\"/opt/scada/venv/bin\"\n\n[program:scada-worker]\ncommand=/opt/scada/venv/bin/python -m app.services.background_worker\ndirectory=/opt/scada\nuser=scada\ngroup=scada\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/supervisor/scada-worker.log\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\nenvironment=PATH=\"/opt/scada/venv/bin\"\n\n[group:scada-app]\nprograms=scada,scada-worker\npriority=999\nEOF\n\n# Atualizar Supervisor\nsudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start scada-app:*\n</code></pre>"},{"location":"DEPLOYMENT/#configuracao-de-firewall","title":"Configura\u00e7\u00e3o de Firewall","text":""},{"location":"DEPLOYMENT/#1-ufw-ubuntu","title":"1. UFW (Ubuntu)","text":"<pre><code># Habilitar UFW\nsudo ufw enable\n\n# Permitir SSH\nsudo ufw allow ssh\n\n# Permitir HTTP e HTTPS\nsudo ufw allow 'Nginx Full'\n\n# Permitir PostgreSQL apenas localmente\nsudo ufw allow from 127.0.0.1 to any port 5432\n\n# Status do firewall\nsudo ufw status\n</code></pre>"},{"location":"DEPLOYMENT/#manutencao-e-monitoramento","title":"\ud83d\udd27 Manuten\u00e7\u00e3o e Monitoramento","text":""},{"location":"DEPLOYMENT/#logs-do-sistema","title":"Logs do Sistema","text":""},{"location":"DEPLOYMENT/#1-configuracao-de-logs","title":"1. Configura\u00e7\u00e3o de Logs","text":"<pre><code># Configurar rota\u00e7\u00e3o de logs\nsudo tee /etc/logrotate.d/scada &lt;&lt; 'EOF'\n/opt/scada/logs/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    create 0644 scada scada\n    postrotate\n        supervisorctl restart scada-app:*\n    endscript\n}\nEOF\n</code></pre>"},{"location":"DEPLOYMENT/#2-monitoramento-de-logs","title":"2. Monitoramento de Logs","text":"<pre><code># Ver logs em tempo real\nsudo tail -f /var/log/supervisor/scada.log\nsudo tail -f /var/log/nginx/scada_access.log\nsudo tail -f /opt/scada/logs/app.log\n\n# Pesquisar erros\nsudo grep -i error /var/log/supervisor/scada.log\nsudo grep -i \"5[0-9][0-9]\" /var/log/nginx/scada_access.log\n</code></pre>"},{"location":"DEPLOYMENT/#backup-automatizado","title":"Backup Automatizado","text":""},{"location":"DEPLOYMENT/#1-script-de-backup","title":"1. Script de Backup","text":"<pre><code>sudo tee /opt/scada/scripts/backup.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\n# Configura\u00e7\u00f5es\nBACKUP_DIR=\"/opt/backups/scada\"\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\n\n# Criar diret\u00f3rio de backup\nmkdir -p $BACKUP_DIR\n\n# Backup do banco de dados\nexport PGPASSWORD=\"SuaSenhaForteAqui123!\"\npg_dump -h localhost -U scada_user -d scada_prod &gt; $BACKUP_DIR/database_$DATE.sql\n\n# Backup dos arquivos da aplica\u00e7\u00e3o\ntar -czf $BACKUP_DIR/application_$DATE.tar.gz -C /opt scada --exclude=scada/venv --exclude=scada/.git\n\n# Backup das configura\u00e7\u00f5es\ncp /opt/scada/.env $BACKUP_DIR/env_$DATE\ncp /etc/nginx/sites-available/scada $BACKUP_DIR/nginx_$DATE.conf\ncp /etc/supervisor/conf.d/scada.conf $BACKUP_DIR/supervisor_$DATE.conf\n\n# Limpar backups antigos\nfind $BACKUP_DIR -name \"*.sql\" -mtime +$RETENTION_DAYS -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +$RETENTION_DAYS -delete\n\necho \"Backup realizado: $DATE\"\nEOF\n\nchmod +x /opt/scada/scripts/backup.sh\n\n# Agendar backup di\u00e1rio\nsudo crontab -e\n# Adicionar linha:\n0 2 * * * /opt/scada/scripts/backup.sh &gt;&gt; /var/log/scada_backup.log 2&gt;&amp;1\n</code></pre>"},{"location":"DEPLOYMENT/#monitoramento-de-performance","title":"Monitoramento de Performance","text":""},{"location":"DEPLOYMENT/#1-monitoramento-com-htop","title":"1. Monitoramento com htop","text":"<pre><code># Instalar htop\nsudo apt install htop\n\n# Monitorar processos\nhtop\n</code></pre>"},{"location":"DEPLOYMENT/#2-monitoramento-de-disco","title":"2. Monitoramento de Disco","text":"<pre><code># Espa\u00e7o em disco\ndf -h\n\n# Uso por diret\u00f3rio\ndu -sh /opt/scada/*\ndu -sh /var/log/*\n</code></pre>"},{"location":"DEPLOYMENT/#3-monitoramento-do-postgresql","title":"3. Monitoramento do PostgreSQL","text":"<pre><code># Status do PostgreSQL\nsudo systemctl status postgresql\n\n# Conex\u00f5es ativas\nsudo -u postgres psql -c \"SELECT count(*) FROM pg_stat_activity;\"\n\n# Tamanho do banco\nsudo -u postgres psql -c \"SELECT pg_size_pretty(pg_database_size('scada_prod'));\"\n</code></pre>"},{"location":"DEPLOYMENT/#atualizacao-da-aplicacao","title":"Atualiza\u00e7\u00e3o da Aplica\u00e7\u00e3o","text":""},{"location":"DEPLOYMENT/#1-script-de-deploy","title":"1. Script de Deploy","text":"<pre><code>sudo tee /opt/scada/scripts/deploy.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\nset -e\n\n# Cores para output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}Iniciando deploy...${NC}\"\n\n# Backup antes do deploy\necho -e \"${YELLOW}Fazendo backup...${NC}\"\n/opt/scada/scripts/backup.sh\n\n# Atualizar c\u00f3digo\necho -e \"${YELLOW}Atualizando c\u00f3digo...${NC}\"\ncd /opt/scada\ngit fetch origin\ngit reset --hard origin/main\n\n# Ativar ambiente virtual\nsource venv/bin/activate\n\n# Atualizar depend\u00eancias\necho -e \"${YELLOW}Atualizando depend\u00eancias...${NC}\"\npip install -r requirements/production.txt\n\n# Executar migra\u00e7\u00f5es\necho -e \"${YELLOW}Executando migra\u00e7\u00f5es...${NC}\"\npython -c \"\nfrom app import create_app\nfrom app.extensions import db\napp = create_app('production')\nwith app.app_context():\n    db.create_all()\n\"\n\n# Coletar arquivos est\u00e1ticos\necho -e \"${YELLOW}Coletando arquivos est\u00e1ticos...${NC}\"\n# Se voc\u00ea tiver assets build process, executar aqui\n\n# Reiniciar aplica\u00e7\u00e3o\necho -e \"${YELLOW}Reiniciando aplica\u00e7\u00e3o...${NC}\"\nsudo supervisorctl restart scada-app:*\n\n# Verificar se aplica\u00e7\u00e3o est\u00e1 rodando\nsleep 5\nif curl -f http://localhost:5000/api/health &gt; /dev/null 2&gt;&amp;1; then\n    echo -e \"${GREEN}Deploy realizado com sucesso!${NC}\"\nelse\n    echo -e \"${RED}Erro no deploy! Aplica\u00e7\u00e3o n\u00e3o responde.${NC}\"\n    exit 1\nfi\nEOF\n\nchmod +x /opt/scada/scripts/deploy.sh\n</code></pre>"},{"location":"DEPLOYMENT/#health-check-e-alertas","title":"Health Check e Alertas","text":""},{"location":"DEPLOYMENT/#1-script-de-health-check","title":"1. Script de Health Check","text":"<pre><code>sudo tee /opt/scada/scripts/health_check.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\n# Fun\u00e7\u00e3o para enviar alerta\nsend_alert() {\n    local message=$1\n    echo \"$(date): $message\" &gt;&gt; /var/log/scada_health.log\n\n    # Enviar email (configurar sendmail ou usar API)\n    # curl -X POST \"https://api.sendgrid.com/v3/mail/send\" \\\n    #   -H \"Authorization: Bearer YOUR_API_KEY\" \\\n    #   -H \"Content-Type: application/json\" \\\n    #   -d '{...}'\n}\n\n# Verificar se aplica\u00e7\u00e3o responde\nif ! curl -f http://localhost:5000/api/health &gt; /dev/null 2&gt;&amp;1; then\n    send_alert \"CR\u00cdTICO: Aplica\u00e7\u00e3o n\u00e3o responde\"\nfi\n\n# Verificar PostgreSQL\nif ! pg_isready -h localhost -U scada_user &gt; /dev/null 2&gt;&amp;1; then\n    send_alert \"CR\u00cdTICO: PostgreSQL n\u00e3o responde\"\nfi\n\n# Verificar Redis\nif ! redis-cli ping &gt; /dev/null 2&gt;&amp;1; then\n    send_alert \"CR\u00cdTICO: Redis n\u00e3o responde\"\nfi\n\n# Verificar espa\u00e7o em disco\nDISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ $DISK_USAGE -gt 80 ]; then\n    send_alert \"ALERTA: Disco com ${DISK_USAGE}% de uso\"\nfi\n\n# Verificar mem\u00f3ria\nMEM_USAGE=$(free | awk 'NR==2{printf \"%.0f\", $3*100/$2}')\nif [ $MEM_USAGE -gt 90 ]; then\n    send_alert \"ALERTA: Mem\u00f3ria com ${MEM_USAGE}% de uso\"\nfi\nEOF\n\nchmod +x /opt/scada/scripts/health_check.sh\n\n# Executar a cada 5 minutos\nsudo crontab -e\n# Adicionar linha:\n*/5 * * * * /opt/scada/scripts/health_check.sh\n</code></pre>"},{"location":"DEPLOYMENT/#metricas-e-observabilidade","title":"\ud83d\udcca M\u00e9tricas e Observabilidade","text":""},{"location":"DEPLOYMENT/#prometheus-e-grafana-opcional","title":"Prometheus e Grafana (Opcional)","text":""},{"location":"DEPLOYMENT/#1-instalacao-do-prometheus","title":"1. Instala\u00e7\u00e3o do Prometheus","text":"<pre><code># Baixar e instalar Prometheus\nwget https://github.com/prometheus/prometheus/releases/download/v2.40.0/prometheus-2.40.0.linux-amd64.tar.gz\ntar xzf prometheus-2.40.0.linux-amd64.tar.gz\nsudo mv prometheus-2.40.0.linux-amd64 /opt/prometheus\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo chown -R prometheus:prometheus /opt/prometheus\n\n# Configurar como servi\u00e7o\nsudo tee /etc/systemd/system/prometheus.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/opt/prometheus/prometheus \\\n  --config.file=/opt/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/opt/prometheus/data \\\n  --web.console.templates=/opt/prometheus/consoles \\\n  --web.console.libraries=/opt/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl start prometheus\nsudo systemctl enable prometheus\n</code></pre>"},{"location":"DEPLOYMENT/#configuracao-de-ssltls","title":"Configura\u00e7\u00e3o de SSL/TLS","text":""},{"location":"DEPLOYMENT/#1-ssl-hardening","title":"1. SSL Hardening","text":"<pre><code># Gerar DH params\nsudo openssl dhparam -out /etc/nginx/dhparam.pem 2048\n\n# Atualizar configura\u00e7\u00e3o do Nginx\nsudo tee -a /etc/nginx/sites-available/scada &lt;&lt; 'EOF'\n    ssl_dhparam /etc/nginx/dhparam.pem;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\nEOF\n\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n</code></pre>"},{"location":"DEPLOYMENT/#troubleshooting-de-producao","title":"Troubleshooting de Produ\u00e7\u00e3o","text":""},{"location":"DEPLOYMENT/#1-comandos-uteis","title":"1. Comandos \u00dateis","text":"<pre><code># Status dos servi\u00e7os\nsudo systemctl status nginx\nsudo systemctl status postgresql\nsudo systemctl status redis\nsudo supervisorctl status\n\n# Logs de erro\nsudo journalctl -u nginx -f\nsudo journalctl -u postgresql -f\nsudo tail -f /var/log/supervisor/scada.log\n\n# Processos da aplica\u00e7\u00e3o\nps aux | grep scada\nnetstat -tulpn | grep :5000\n\n# Conex\u00f5es do banco\nsudo -u postgres psql -c \"SELECT * FROM pg_stat_activity WHERE datname='scada_prod';\"\n\n# Cache do Redis\nredis-cli info memory\nredis-cli keys \"*\"\n</code></pre>"},{"location":"DEPLOYMENT/#2-restart-de-emergencia","title":"2. Restart de Emerg\u00eancia","text":"<pre><code># Restart completo\nsudo supervisorctl stop scada-app:*\nsudo systemctl restart postgresql\nsudo systemctl restart redis\nsudo systemctl restart nginx\nsudo supervisorctl start scada-app:*\n\n# Verificar status\ncurl -I http://localhost:5000/api/health\n</code></pre>"},{"location":"Guia%20de%20Desenvolvimento/","title":"Guia de Desenvolvimento","text":""},{"location":"Guia%20de%20Desenvolvimento/#padroes-arquiteturais","title":"Padr\u00f5es Arquiteturais","text":"<ul> <li>Application Factory Pattern: A aplica\u00e7\u00e3o Flask \u00e9 criada via <code>create_app()</code>.</li> <li>Repository Pattern: O acesso aos dados \u00e9 abstra\u00eddo por classes de reposit\u00f3rio (ex: <code>PlcRepo</code>, <code>RegisterRepo</code>).</li> <li>Adapter Pattern: A comunica\u00e7\u00e3o com protocolos de CLP \u00e9 isolada em classes <code>Adapter</code> (ex: <code>ModbusAdapter</code>).</li> <li>Service &amp; Manager Layer: A l\u00f3gica de neg\u00f3cios \u00e9 dividida em <code>Services</code> (orquestra\u00e7\u00e3o de alto n\u00edvel) e <code>Managers</code> (gerenciamento de estado e workers).</li> </ul>"},{"location":"Guia%20de%20Desenvolvimento/#iniciar-a-aplicacao","title":"Iniciar a aplica\u00e7\u00e3o","text":""},{"location":"Guia%20de%20Desenvolvimento/#criar-app-iniciar-flask","title":"criar #app #iniciar #flask","text":"<p>Para dar inicio ao projeto, deve-se criar a aplica\u00e7\u00e3o Flask geral tamb\u00e9m para <code>app_context</code>, seguido o seguinte exemplo</p> <pre><code>from src.app import creat_app #importa a cria\u00e7\u00e3o da apica\u00e7\u00e3o\n\napp = creat_app() # cria a aplica\u00e7\u00e3o\n\napp.run(host=\"0.0.0.0\", port=5000, debug=True, use_reloader=False) #inicia o servidor Flask\n</code></pre> <p>para configurar v\u00e1 para [[Configurando aplica\u00e7\u00e3o Flask]]</p>"},{"location":"Guia%20de%20Desenvolvimento/#adicionar-plcs","title":"Adicionar PLCs","text":""},{"location":"Guia%20de%20Desenvolvimento/#criar-plc-db","title":"criar #plc #db","text":"<p>Para adicionar PLCs via c\u00f3digo, primeiro deve-se criar o objeto do PLC e com esse objeto, adicionar ao banco de dados sempre usando o <code>app_context</code></p> <pre><code>\nfrom src.app import creat_app \nfrom src.models import PLC #Import a classe para a cria\u00e7\u00e3o\nfrom src.repository.PLC_repository import Plcrepo #Import objeto para manipul\u00e3o no db\n\napp = creat_app()\n\nwith app.app_context():\n    new_plc = PLC(name='PLCMod', \n    ip_address='127.0.0.1', protocol='modbus', port=5020,\n    unit_id=1, is_active=True) #Cria o objeto do PLC\n    Plcrepo.add(new_plc) #adiciona plc ao banco de dados\n\n\n\napp.run(host=\"0.0.0.0\", port=5000, debug=True, use_reloader=False) \n\n</code></pre>"},{"location":"Guia%20de%20Desenvolvimento/#lista-de-parametros-dos-plcs","title":"Lista de par\u00e2metros dos PLCs:","text":"<p>```python  \u00a0 \u00a0id = db.Column(db.Integer, primary_key=True) \u00a0 \u00a0 name = db.Column(db.String(100), nullable=False) \u00a0 \u00a0 description = db.Column(db.Text) \u00a0 \u00a0 ip_address = db.Column(db.String(45), nullable=False) \u00a0# ipv6-safe \u00a0 \u00a0 mac_address = db.Column(db.String(17)) \u00a0 \u00a0 subnet_mask = db.Column(db.String(45)) \u00a0 \u00a0 vlan_id = db.Column(db.Integer) \u00a0# importante para diferenciar IPs por VLAN \u00a0 \u00a0 gateway = db.Column(db.String(45)) \u00a0 \u00a0 protocol = db.Column(db.String(20), nullable=False) \u00a0# modbus, s7, ethernet_ip \u00a0 \u00a0 port = db.Column(db.Integer, nullable=False) \u00a0 \u00a0 unit_id = db.Column(db.Integer) \u00a0# Para Modbus \u00a0 \u00a0 rack_slot = db.Column(db.String(10)) \u00a0# Para S7 (rack.slot) \u00a0 \u00a0 manufacturer = db.Column(db.String(50)) \u00a0 \u00a0 model = db.Column(db.String(50)) \u00a0 \u00a0 firmware_version = db.Column(db.String(20)) \u00a0 \u00a0 serial_number = db.Column(db.String(50)) \u00a0 \u00a0 last_maintenance = db.Column(db.DateTime) \u00a0 \u00a0 maintenance_by = db.Column(db.String(100)) \u00a0 \u00a0 maintenance_notes = db.Column(db.Text) \u00a0 \u00a0 next_maintenance = db.Column(db.DateTime)</p> <pre><code>#Relacionamento\n</code></pre> <p>organization_id = db.Column(db.Integer, db.ForeignKey('organization.id')) \u00a0 \u00a0 organization = db.relationship(\"Organization\", backref=\"plcs\") \u00a0 \u00a0 # use JSON se seu DB suportar (Postgres). Caso contr\u00e1rio Text. \u00a0 \u00a0 try: \u00a0 \u00a0 \u00a0 \u00a0 tags = db.Column(db.JSON) \u00a0 \u00a0 except Exception: \u00a0 \u00a0 \u00a0 \u00a0 tags = db.Column(db.Text) \u00a0 \u00a0 is_active = db.Column(db.Boolean, default=True) \u00a0 \u00a0 is_online = db.Column(db.Boolean, default=False) \u00a0 \u00a0 last_seen = db.Column(db.DateTime) \u00a0 \u00a0 polling_interval = db.Column(db.Integer, default=1000) \u00a0# ms \u00a0 \u00a0 timeout = db.Column(db.Integer, default=5000) \u00a0# ms \u00a0 \u00a0 retry_count = db.Column(db.Integer, default=3) \u00a0 \u00a0 created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc)) \u00a0 \u00a0 updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc), onupdate=datetime.now(timezone.utc)) \u00a0 \u00a0      #Outros relacionamentos \u00a0 \u00a0 registers = db.relationship('Register', backref='plc', cascade='all, delete-orphan') \u00a0 \u00a0 data_logs = db.relationship('DataLog', backref='plc') \u00a0 \u00a0 alarms = db.relationship('Alarm', backref='plc')  ```</p>"},{"location":"Guia%20de%20Desenvolvimento/#adicionar-registradores","title":"Adicionar Registradores","text":""},{"location":"Guia%20de%20Desenvolvimento/#criar-registradores-polling-leitura","title":"criar #registradores #polling #leitura","text":"<p>Para adicionar registradores, segue-se a mesma estrutura dos PLCs, importe a classe modelo e adicione com o repository, mas, Register \u00e9 relacionado ao PLC pelo id do PLC, ent\u00e3o precisamos buscar o id do PLC no db e adicionar o id para o register </p> <pre><code>from src.app import creat_app \nfrom src.models import PLC, Register #importa a class\nfrom src.repository.PLC_repository import Plcrepo \nfrom src.repository.Registers_repository import RegRepo #importa o objeto para manipula\u00e7\u00e3o\n\napp = creat_app()\n\nwith app.app_context():\n    new_plc = PLC(name='PLCMod', \n    ip_address='127.0.0.1', protocol='modbus', port=5020,\n    unit_id=1, is_active=True) \n    Plcrepo.add(new_plc)\n\n    plc = Plcrepo.firts_by(ip_adrres='127.0.0.1') #Pocura o clp no db com um filtro de ip\n\n    reg = Register(plc_id=plc.id,\n\u00a0 \u00a0 name=\"Registrador_teste,\n\u00a0 \u00a0 address=0,\n\u00a0 \u00a0 register_type=\"holding\",\n\u00a0 \u00a0 data_type=\"int16\",\n\u00a0 \u00a0 scale_factor=1.0,\n\u00a0 \u00a0 offset=0.0,\n\u00a0 \u00a0 unit=\"\u00b0C\",\n\u00a0 \u00a0 is_active=True) #Cria o objeto do Register\n\n\u00a0 \u00a0 RegRepo.add(reg) #adiciona plc ao banco de dados\n\n\napp.run(host=\"0.0.0.0\", port=5000, debug=True, use_reloader=False) \n</code></pre>"},{"location":"Guia%20de%20Desenvolvimento/#lista-de-parametros-dos-registers","title":"## Lista de par\u00e2metros dos Registers:","text":"<pre><code>    id = db.Column(db.Integer, primary_key=True)\n\u00a0 \u00a0 plc_id = db.Column(db.Integer, db.ForeignKey('plc.id'), nullable=False)\n\u00a0 \u00a0 slave = db.Column(db.Integer, default=1)\n\u00a0 \u00a0 name = db.Column(db.String(100), nullable=False)\n\u00a0 \u00a0 description = db.Column(db.Text)\n\u00a0 \u00a0 tag = db.Column(db.String(50))\n\u00a0 \u00a0 address = db.Column(db.String(50), nullable=False) \u00a0# mant\u00e9m string (p.ex. \"40001\" ou \"40001.1\")\n\u00a0 \u00a0 register_type = db.Column(db.String(20), nullable=False)\n\u00a0 \u00a0 data_type = db.Column(db.String(20), nullable=False)\n\u00a0 \u00a0 length = db.Column(db.Integer, default=1)\n\u00a0 \u00a0 scale_factor = db.Column(db.Float, default=1.0)\n\u00a0 \u00a0 offset = db.Column(db.Float, default=0.0)\n\u00a0 \u00a0 unit = db.Column(db.String(20))\n\u00a0 \u00a0 decimal_places = db.Column(db.Integer, default=2)\n\u00a0 \u00a0 min_value = db.Column(db.Float)\n\u00a0 \u00a0 max_value = db.Column(db.Float)\n\u00a0 \u00a0 low_alarm = db.Column(db.Float)\n\u00a0 \u00a0 high_alarm = db.Column(db.Float)\n\u00a0 \u00a0 is_active = db.Column(db.Boolean, default=True)\n\u00a0 \u00a0 poll_rate = db.Column(db.Integer, default=1000) \u00a0# ms\n\u00a0 \u00a0 log_enabled = db.Column(db.Boolean, default=True)\n\u00a0 \u00a0 last_value = db.Column(db.Text) \u00a0# pode guardar JSON como fallback\n\u00a0 \u00a0 last_read = db.Column(db.DateTime)\n\u00a0 \u00a0 error_count = db.Column(db.Integer, default=0)\n\u00a0 \u00a0 last_error = db.Column(db.Text)\n\u00a0 \u00a0 created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))  \n\u00a0 \u00a0 updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc), onupdate=datetime.now(timezone.utc))\n</code></pre>"},{"location":"INDEX/","title":"\ud83d\udcda Documenta\u00e7\u00e3o Completa - \u00cdndice Principal","text":""},{"location":"INDEX/#sistema-scada-industrial-documentacao-completa","title":"\ud83d\udcd6 Sistema SCADA Industrial - Documenta\u00e7\u00e3o Completa","text":""},{"location":"INDEX/#estrutura-da-documentacao","title":"\ud83d\uddc2\ufe0f Estrutura da Documenta\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o est\u00e1 organizada nos seguintes arquivos:</p> <ol> <li>README.md - Documenta\u00e7\u00e3o principal com vis\u00e3o geral, instala\u00e7\u00e3o b\u00e1sica, manual do usu\u00e1rio e API</li> <li>DEVELOPMENT.md - Guia completo de desenvolvimento, arquitetura e padr\u00f5es de c\u00f3digo</li> <li>DEPLOYMENT.md - Manual de deploy em produ\u00e7\u00e3o, configura\u00e7\u00e3o de servidor e manuten\u00e7\u00e3o</li> <li>TROUBLESHOOTING.md - Solu\u00e7\u00e3o de problemas comuns e debug</li> </ol>"},{"location":"INDEX/#para-comecar-rapidamente","title":"\ud83d\ude80 Para Come\u00e7ar Rapidamente","text":""},{"location":"INDEX/#sistema-scada-industrial-com-flask","title":"Sistema SCADA Industrial com Flask","text":"<p>Um sistema de aquisi\u00e7\u00e3o e monitoramento de dados em tempo real para automa\u00e7\u00e3o industrial, constru\u00eddo com Python e Flask.</p> <p> </p> <p>Este projeto \u00e9 uma solu\u00e7\u00e3o SCADA (Supervisory Control and Data Acquisition) de c\u00f3digo aberto, desenvolvida para monitorar e controlar processos industriais. Utilizando uma arquitetura moderna baseada em Flask, SQLAlchemy e comunica\u00e7\u00e3o ass\u00edncrona, o sistema \u00e9 capaz de coletar dados de CLPs (Controladores L\u00f3gicos Program\u00e1veis) atrav\u00e9s de protocolos como Modbus TCP. A interface web permite a visualiza\u00e7\u00e3o de dados em tempo real, gerenciamento de alarmes e controle do processo de polling.</p>"},{"location":"INDEX/#tecnologias","title":"Tecnologias","text":"<ul> <li>Backend: Flask, SQLAlchemy, Flask-Login</li> <li>Comunica\u00e7\u00e3o: Pymodbus (para Modbus TCP)</li> <li>Banco de Dados: SQLite (desenvolvimento), PostgreSQL (produ\u00e7\u00e3o)</li> <li>Testes: Pytest, pytest-asyncio</li> </ul>"},{"location":"INDEX/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>\n/ \u251c\u2500\u2500 src/ \n  \u2502 \u251c\u2500\u2500 adapters/ # Conectores de protocolos (ex: ModbusAdapter) \n  \u2502 \u251c\u2500\u2500 manager/ # L\u00f3gica de estado e workers (ex: SimpleManager)\n  \u2502 \u251c\u2500\u2500 models/ # Defini\u00e7\u00f5es do banco de dados (SQLAlchemy) \n  \u2502 \u251c\u2500\u2500 repository/ # Acesso aos dados (ex: PlcRepo) \n  \u2502 \u251c\u2500\u2500 services/ # Orquestra\u00e7\u00e3o da l\u00f3gica de neg\u00f3cios (ex: Polling Service) \n  \u2502 \u2514\u2500\u2500 simulations/ # Simuladores de CLPs para testes \n  \u251c\u2500\u2500 tests/ # Testes unit\u00e1rios e de integra\u00e7\u00e3o \n  \u2514\u2500\u2500 run.py # Ponto de entrada da aplica\u00e7\u00e3o\n\n   ```\n\n### Pr\u00e9-requisitos\n- Python 3.8+\n- Git\n\n### Passos para Instala\u00e7\u00e3o\n1.  **Clone o reposit\u00f3rio:**\n```bash\n    git clone &lt;URL_DO_SEU_REPOSITORIO&gt;\n    cd CLP_TCC3\n    ```\n\n2.  **Crie e ative um ambiente virtual:**\n```bash\n    python -m venv .venv\n    # No Windows:\n    .venv\\Scripts\\activate\n    # No Linux/Mac:\n    source .venv/bin/activate\n    ```\n\n3.  **Instale as depend\u00eancias:**\n```bash\n    pip install -r requirements.txt\n    ```\n\n4.  **Execute a aplica\u00e7\u00e3o:**\n```bash\n    python run.py\n    ```\n\nA aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em `http://127.0.0.1:5000`. O script `run.py` iniciar\u00e1 automaticamente os simuladores de CLP e o servi\u00e7o de polling em background.\n\nPara informa\u00e7\u00f5es mais detalhadas sobre arquitetura, deploy e solu\u00e7\u00e3o de problemas, consulte os seguintes guias:\n\n- \ud83d\udcd6 **[[Guia de Desenvolvimento|DEVELOPMENT.md]]**: Para desenvolvedores que desejam entender a arquitetura, os padr\u00f5es de c\u00f3digo e como contribuir.\n- \ud83d\ude80**[[Guia de Deploy|DEPLOYMENT.md]]**: Instru\u00e7\u00f5es completas para configurar o ambiente de produ\u00e7\u00e3o.\n- \ud83d\udd27 **[[Troubleshooting|TROUBLESHOOTING.md]]**: Solu\u00e7\u00f5es para problemas comuns e dicas de debug.\n### \ud83c\udfc3\u200d\u2642\ufe0f Instala\u00e7\u00e3o R\u00e1pida\n```bash\n# 1. Usar o script de migra\u00e7\u00e3o autom\u00e1tica\npython migrate_project.py\n\n# 2. Instalar depend\u00eancias\npip install -r requirements.txt\n\n# 3. Configurar ambiente\ncp .env.example .env\n\n# 4. Inicializar banco\npython scripts/init_db.py\n\n# 5. Executar\npython run.py\n</code></pre>"},{"location":"INDEX/#acesso","title":"\ud83c\udf10 Acesso","text":"<ul> <li>URL: http://localhost:5000</li> <li>Login: admin / admin123</li> </ul>"},{"location":"INDEX/#documentacao-por-perfil","title":"\ud83d\udccb Documenta\u00e7\u00e3o por Perfil","text":""},{"location":"INDEX/#para-administradores","title":"\ud83d\udc68\u200d\ud83d\udcbc Para Administradores","text":"<ul> <li>Manual de Instala\u00e7\u00e3o - Setup inicial</li> <li>Manual do Usu\u00e1rio - Como usar o sistema</li> <li>Deploy em Produ\u00e7\u00e3o - Configura\u00e7\u00e3o de servidor</li> <li>Troubleshooting - Solu\u00e7\u00e3o de problemas</li> </ul>"},{"location":"INDEX/#para-desenvolvedores","title":"\ud83d\udc68\u200d\ud83d\udcbb Para Desenvolvedores","text":"<ul> <li>Arquitetura do Sistema - Padr\u00f5es e estrutura</li> <li>Setup de Desenvolvimento - Ambiente de dev</li> <li>Padr\u00f5es de C\u00f3digo - Estilo e boas pr\u00e1ticas</li> <li>Testes - Como escrever e executar testes</li> <li>Debug Tools - Ferramentas de debug</li> </ul>"},{"location":"INDEX/#para-devops","title":"\ud83d\udd27 Para DevOps","text":"<ul> <li>Deploy em Produ\u00e7\u00e3o - Setup completo de servidor</li> <li>Monitoramento - Logs e m\u00e9tricas</li> <li>Backup e Manuten\u00e7\u00e3o - Processos automatizados</li> <li>Seguran\u00e7a - Configura\u00e7\u00f5es de seguran\u00e7a</li> </ul>"},{"location":"INDEX/#para-integradores","title":"\ud83d\udd0c Para Integradores","text":"<ul> <li>Documenta\u00e7\u00e3o da API - Endpoints REST</li> <li>Adapters de Protocolo - Como criar novos adapters</li> <li>Exemplos de Integra\u00e7\u00e3o - Python, JavaScript, curl</li> </ul>"},{"location":"INDEX/#arquivos-de-configuracao-e-scripts","title":"\ud83d\udcc1 Arquivos de Configura\u00e7\u00e3o e Scripts","text":""},{"location":"INDEX/#arquivos-de-configuracao","title":"\ud83d\udcc4 Arquivos de Configura\u00e7\u00e3o","text":"<ul> <li><code>.env.example</code> - Template de configura\u00e7\u00e3o</li> <li><code>requirements.txt</code> - Depend\u00eancias Python</li> <li><code>docker-compose.yml</code> - Configura\u00e7\u00e3o Docker</li> <li><code>migrate_project.py</code> - Script de migra\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"INDEX/#scripts-utilitarios","title":"\ud83d\udd27 Scripts Utilit\u00e1rios","text":"<ul> <li><code>scripts/init_db.py</code> - Inicializa\u00e7\u00e3o do banco de dados</li> <li><code>scripts/backup.sh</code> - Script de backup (produ\u00e7\u00e3o)</li> <li><code>scripts/deploy.sh</code> - Script de deploy (produ\u00e7\u00e3o)</li> <li><code>scripts/health_check.sh</code> - Verifica\u00e7\u00e3o de sa\u00fade do sistema</li> </ul>"},{"location":"INDEX/#estrutura-tecnica-resumida","title":"\ud83c\udfd7\ufe0f Estrutura T\u00e9cnica Resumida","text":""},{"location":"INDEX/#tecnologias-principais","title":"Tecnologias Principais","text":"<ul> <li>Backend: Flask, SQLAlchemy, Flask-SocketIO</li> <li>Frontend: Bootstrap 5, Chart.js, WebSockets</li> <li>Protocolos: Modbus TCP/RTU, Siemens S7</li> <li>Banco: SQLite (dev), PostgreSQL (prod)</li> <li>Cache: Redis</li> <li>Deploy: Nginx, Supervisor, Docker</li> </ul>"},{"location":"INDEX/#modulos-principais","title":"M\u00f3dulos Principais","text":"<pre><code>app/\n\u251c\u2500\u2500 auth/           # Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o\n\u251c\u2500\u2500 models/         # Modelos de dados (SQLAlchemy)\n\u251c\u2500\u2500 services/       # L\u00f3gica de neg\u00f3cios\n\u2502   \u251c\u2500\u2500 polling_service.py    # Coleta de dados\n\u2502   \u251c\u2500\u2500 alarm_service.py      # Sistema de alarmes\n\u2502   \u251c\u2500\u2500 security_service.py   # Seguran\u00e7a\n\u2502   \u2514\u2500\u2500 backup_service.py     # Backup autom\u00e1tico\n\u251c\u2500\u2500 api/            # API REST\n\u251c\u2500\u2500 web/            # Interface web\n\u251c\u2500\u2500 adapters/       # Drivers de comunica\u00e7\u00e3o\n\u2514\u2500\u2500 utils/          # Utilit\u00e1rios\n</code></pre>"},{"location":"INDEX/#links-rapidos","title":"\ud83d\udd17 Links R\u00e1pidos","text":""},{"location":"INDEX/#documentacao","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o","text":"<ul> <li>Vis\u00e3o Geral do Sistema</li> <li>Instala\u00e7\u00e3o Passo a Passo</li> <li>Configura\u00e7\u00e3o de PLCs</li> <li>Sistema de Alarmes</li> <li>API REST Completa</li> </ul>"},{"location":"INDEX/#desenvolvimento","title":"\ud83d\udee0\ufe0f Desenvolvimento","text":"<ul> <li>Arquitetura e Padr\u00f5es</li> <li>Setup de Desenvolvimento</li> <li>Criando Testes</li> <li>Novos Adapters</li> </ul>"},{"location":"INDEX/#producao","title":"\ud83d\ude80 Produ\u00e7\u00e3o","text":"<ul> <li>Deploy Completo</li> <li>Configura\u00e7\u00e3o Nginx</li> <li>Monitoramento</li> <li>Backup Autom\u00e1tico</li> </ul>"},{"location":"INDEX/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<ul> <li>Problemas Comuns</li> <li>Debug de Comunica\u00e7\u00e3o</li> <li>Performance Issues</li> <li>Scripts de Debug</li> </ul>"},{"location":"INDEX/#suporte-e-contribuicao","title":"\ud83c\udd98 Suporte e Contribui\u00e7\u00e3o","text":""},{"location":"INDEX/#canais-de-suporte","title":"\ud83d\udcde Canais de Suporte","text":"<ul> <li>GitHub Issues: Para bugs e feature requests</li> <li>Email: suporte@scada.local</li> <li>Wiki: Documenta\u00e7\u00e3o adicional</li> </ul>"},{"location":"INDEX/#como-contribuir","title":"\ud83e\udd1d Como Contribuir","text":"<ol> <li>Fork o projeto</li> <li>Crie uma branch (<code>git checkout -b feature/NovaFuncionalidade</code>)</li> <li>Commit suas mudan\u00e7as (<code>git commit -m 'Adiciona nova funcionalidade'</code>)</li> <li>Push para a branch (<code>git push origin feature/NovaFuncionalidade</code>)</li> <li>Abra um Pull Request</li> </ol>"},{"location":"INDEX/#reportar-problemas","title":"\ud83d\udcdd Reportar Problemas","text":"<p>Use o template de issue para reportar problemas.</p>"},{"location":"INDEX/#status-do-projeto","title":"\ud83d\udcca Status do Projeto","text":""},{"location":"INDEX/#funcionalidades-implementadas","title":"\u2705 Funcionalidades Implementadas","text":"<ul> <li>[x] Sistema de autentica\u00e7\u00e3o com roles</li> <li>[x] Interface web moderna e responsiva</li> <li>[x] Polling de dados em tempo real</li> <li>[x] Sistema de alarmes completo</li> <li>[x] Suporte a Modbus TCP/RTU</li> <li>[x] Suporte a Siemens S7</li> <li>[x] API REST completa</li> <li>[x] Sistema de relat\u00f3rios</li> <li>[x] Backup autom\u00e1tico</li> <li>[x] Auditoria de seguran\u00e7a</li> </ul>"},{"location":"INDEX/#em-desenvolvimento","title":"\ud83d\udd04 Em Desenvolvimento","text":"<ul> <li>[ ] Suporte a EtherNet/IP</li> <li>[ ] Suporte a OPC UA</li> <li>[ ] Dashboard customiz\u00e1vel</li> <li>[ ] Integra\u00e7\u00e3o com MES/ERP</li> <li>[ ] App mobile</li> </ul>"},{"location":"INDEX/#roadmap","title":"\ud83d\udcc8 Roadmap","text":"<ul> <li>v2.1: Suporte a OPC UA e EtherNet/IP</li> <li>v2.2: Dashboard customiz\u00e1vel e widgets</li> <li>v2.3: Integra\u00e7\u00e3o com sistemas MES/ERP</li> <li>v3.0: Aplicativo mobile nativo</li> </ul>"},{"location":"INDEX/#licenca","title":"\ud83d\udcc4 Licen\u00e7a","text":"<p>Este projeto est\u00e1 licenciado sob a MIT License - veja o arquivo LICENSE para detalhes.</p>"},{"location":"INDEX/#agradecimentos","title":"\ud83d\ude4f Agradecimentos","text":"<ul> <li>Flask Community - Framework web excepcional</li> <li>PyModbus Team - Biblioteca Modbus robusta  </li> <li>Python-snap7 - Interface S7 confi\u00e1vel</li> <li>Bootstrap Team - Framework CSS moderno</li> <li>Chart.js - Gr\u00e1ficos interativos</li> </ul> <p>Sistema SCADA Industrial v2.0 Desenvolvido com \u2764\ufe0f para a ind\u00fastria brasileira</p>"},{"location":"TROUBLESHOOTING/","title":"\ud83d\udd27 Troubleshooting - Solu\u00e7\u00e3o de Problemas","text":""},{"location":"TROUBLESHOOTING/#problemas-comuns-e-solucoes","title":"\ud83d\udea8 Problemas Comuns e Solu\u00e7\u00f5es","text":""},{"location":"TROUBLESHOOTING/#problemas-de-instalacao","title":"Problemas de Instala\u00e7\u00e3o","text":""},{"location":"TROUBLESHOOTING/#pythonpip-issues","title":"Python/Pip Issues","text":"<p>Problema: <code>pip install</code> falha com erros de compila\u00e7\u00e3o</p> <pre><code># Solu\u00e7\u00e3o: Instalar depend\u00eancias de desenvolvimento\n# Ubuntu/Debian\nsudo apt-get install python3-dev build-essential libffi-dev libssl-dev\n\n# CentOS/RHEL\nsudo yum groupinstall \"Development Tools\"\nsudo yum install python3-devel libffi-devel openssl-devel\n</code></pre> <p>Problema: Erro de permiss\u00e3o no pip</p> <pre><code># Solu\u00e7\u00e3o: Usar usu\u00e1rio virtual environment\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip\n</code></pre>"},{"location":"TROUBLESHOOTING/#dependencias-snap7","title":"Depend\u00eancias Snap7","text":"<p>Problema: <code>ImportError: snap7.dll not found</code> (Windows)</p> <pre><code># Solu\u00e7\u00e3o: \n1. Baixar snap7 library de https://snap7.sourceforge.net/\n2. Extrair snap7.dll para uma pasta no PATH\n3. Ou colocar na pasta do projeto\n</code></pre> <p>Problema: <code>libsnap7.so not found</code> (Linux)</p> <pre><code># Ubuntu/Debian\nsudo apt-get install libsnap7-1 libsnap7-dev\n\n# Ou instalar manualmente:\nwget https://github.com/gijzelaerr/python-snap7/files/2432652/snap7-full-1.4.2.tar.gz\ntar -xzf snap7-full-1.4.2.tar.gz\ncd snap7-full-1.4.2/build/unix\nmake -f x86_64_linux.mk\nsudo cp ../bin/x86_64-linux/libsnap7.so /usr/lib/\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-banco-de-dados","title":"Problemas de Banco de Dados","text":""},{"location":"TROUBLESHOOTING/#sqlite-locked","title":"SQLite Locked","text":"<p>Problema: <code>database is locked</code></p> <pre><code># Solu\u00e7\u00e3o: Verificar conex\u00f5es pendentes\nfrom app import create_app\nfrom app.extensions import db\n\napp = create_app()\nwith app.app_context():\n    db.session.close()\n    db.engine.dispose()\n</code></pre>"},{"location":"TROUBLESHOOTING/#postgresql-connection-issues","title":"PostgreSQL Connection Issues","text":"<p>Problema: <code>FATAL: password authentication failed</code></p> <pre><code># Verificar configura\u00e7\u00f5es\nsudo -u postgres psql\n\\l  # Listar bancos\n\\du # Listar usu\u00e1rios\n\n# Recriar usu\u00e1rio se necess\u00e1rio\nDROP USER IF EXISTS scada_user;\nCREATE USER scada_user WITH PASSWORD 'nova_senha';\nGRANT ALL PRIVILEGES ON DATABASE scada TO scada_user;\n</code></pre> <p>Problema: <code>could not connect to server</code></p> <pre><code># Verificar se PostgreSQL est\u00e1 rodando\nsudo systemctl status postgresql\nsudo systemctl start postgresql\n\n# Verificar configura\u00e7\u00e3o de rede\nsudo grep -n \"listen_addresses\" /etc/postgresql/*/main/postgresql.conf\nsudo grep -n \"port\" /etc/postgresql/*/main/postgresql.conf\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-comunicacao-com-plcs","title":"Problemas de Comunica\u00e7\u00e3o com PLCs","text":""},{"location":"TROUBLESHOOTING/#modbus-tcp-issues","title":"Modbus TCP Issues","text":"<p>Problema: <code>ConnectionException: Modbus Error: [Connection] Failed to connect</code></p> <pre><code># Debug step-by-step\nimport socket\n\ndef test_tcp_connection(host, port):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        result = sock.connect_ex((host, port))\n        sock.close()\n\n        if result == 0:\n            print(f\"\u2705 Conex\u00e3o TCP OK para {host}:{port}\")\n            return True\n        else:\n            print(f\"\u274c N\u00e3o foi poss\u00edvel conectar em {host}:{port}\")\n            return False\n    except Exception as e:\n        print(f\"\u274c Erro na conex\u00e3o: {e}\")\n        return False\n\n# Testar conectividade\ntest_tcp_connection('192.168.1.100', 502)\n</code></pre> <p>Problema: <code>ModbusIOException: Modbus Error: [Invalid Message]</code></p> <pre><code># Verificar configura\u00e7\u00f5es do Modbus\nfrom pymodbus.client.sync import ModbusTcpClient\n\nclient = ModbusTcpClient('192.168.1.100', port=502)\nclient.connect()\n\n# Testar leitura simples\ntry:\n    result = client.read_holding_registers(0, 1, unit=1)\n    if result.isError():\n        print(f\"Erro Modbus: {result}\")\n    else:\n        print(f\"Valor lido: {result.registers[0]}\")\nexcept Exception as e:\n    print(f\"Erro na leitura: {e}\")\nfinally:\n    client.close()\n</code></pre>"},{"location":"TROUBLESHOOTING/#siemens-s7-issues","title":"Siemens S7 Issues","text":"<p>Problema: <code>S7 Communication Error</code></p> <pre><code># Debug S7 connection\nimport snap7\nfrom snap7.util import *\n\ndef test_s7_connection(ip, rack=0, slot=1):\n    plc = snap7.client.Client()\n\n    try:\n        plc.connect(ip, rack, slot)\n        print(f\"\u2705 Conectado ao S7 PLC em {ip}\")\n\n        # Testar leitura de DB\n        data = plc.db_read(1, 0, 2)  # DB1, offset 0, 2 bytes\n        value = get_int(data, 0)\n        print(f\"Valor lido do DB1: {value}\")\n\n        return True\n    except Exception as e:\n        print(f\"\u274c Erro S7: {e}\")\n        return False\n    finally:\n        plc.disconnect()\n\n# Testar\ntest_s7_connection('192.168.1.100')\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-polling","title":"Problemas de Polling","text":""},{"location":"TROUBLESHOOTING/#polling-not-starting","title":"Polling Not Starting","text":"<p>Problema: Polling n\u00e3o inicia ou para inesperadamente</p> <pre><code># Debug no PollingManager\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Verificar logs espec\u00edficos\ntail -f logs/polling.log | grep ERROR\n\n# Verificar se PLC est\u00e1 configurado corretamente\nfrom app import create_app\nfrom app.models.plc import PLC\nfrom app.models.register import Register\n\napp = create_app()\nwith app.app_context():\n    plc = PLC.query.filter_by(ip_address='192.168.1.100').first()\n    if plc:\n        print(f\"PLC encontrado: {plc.name}\")\n        print(f\"Protocolo: {plc.protocol}\")\n        print(f\"Registradores ativos: {len([r for r in plc.registers if r.is_active])}\")\n    else:\n        print(\"PLC n\u00e3o encontrado no banco de dados\")\n</code></pre>"},{"location":"TROUBLESHOOTING/#high-cpu-usage-in-polling","title":"High CPU Usage in Polling","text":"<p>Problema: CPU alto durante polling</p> <pre><code># Ajustar intervalos e timeouts\n# Em app/config.py\nclass Config:\n    POLLING_DEFAULT_INTERVAL = 2000  # Aumentar de 1000ms para 2000ms\n    POLLING_TIMEOUT = 10  # Aumentar timeout\n\n# Verificar n\u00famero de registradores por polling\n# Dividir em m\u00faltiplos jobs se necess\u00e1rio\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-performance","title":"Problemas de Performance","text":""},{"location":"TROUBLESHOOTING/#slow-database-queries","title":"Slow Database Queries","text":"<p>Problema: Queries lentas</p> <pre><code>-- Verificar queries lentas no PostgreSQL\nSELECT query, mean_time, calls \nFROM pg_stat_statements \nORDER BY mean_time DESC \nLIMIT 10;\n\n-- Verificar \u00edndices\nSELECT schemaname, tablename, indexname, indexdef\nFROM pg_indexes \nWHERE tablename IN ('data_log', 'alarm', 'register');\n</code></pre> <p>Solu\u00e7\u00e3o: Adicionar \u00edndices</p> <pre><code># Em migrations ou manualmente\nCREATE INDEX idx_data_log_timestamp_plc ON data_log(timestamp, plc_id);\nCREATE INDEX idx_data_log_register_time ON data_log(register_id, timestamp);\nCREATE INDEX idx_alarm_state_priority ON alarm(state, priority);\n</code></pre>"},{"location":"TROUBLESHOOTING/#memory-leaks","title":"Memory Leaks","text":"<p>Problema: Uso crescente de mem\u00f3ria</p> <pre><code># Debug memory usage\nimport psutil\nimport os\n\ndef log_memory_usage():\n    process = psutil.Process(os.getpid())\n    memory_mb = process.memory_info().rss / 1024 / 1024\n    print(f\"Uso de mem\u00f3ria: {memory_mb:.2f} MB\")\n\n# Adicionar ao polling loop\nlog_memory_usage()\n</code></pre> <p>Solu\u00e7\u00e3o: Gerenciar conex\u00f5es de banco</p> <pre><code># Em app/services/polling_service.py\nclass DataProcessor:\n    def _process_data(self):\n        while self.running:\n            try:\n                # Processar dados\n                pass\n            finally:\n                # Importante: fechar sess\u00f5es\n                db.session.remove()\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-seguranca","title":"Problemas de Seguran\u00e7a","text":""},{"location":"TROUBLESHOOTING/#csrf-token-missing","title":"CSRF Token Missing","text":"<p>Problema: <code>The CSRF token is missing</code></p> <pre><code>&lt;!-- Adicionar em todos os formul\u00e1rios --&gt;\n&lt;form method=\"POST\"&gt;\n    {{ csrf_token() }}\n    &lt;!-- ou --&gt;\n    &lt;input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\"/&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"TROUBLESHOOTING/#session-issues","title":"Session Issues","text":"<p>Problema: Usu\u00e1rio deslogado constantemente</p> <pre><code># Verificar configura\u00e7\u00f5es de sess\u00e3o\n# Em app/config.py\nclass Config:\n    PERMANENT_SESSION_LIFETIME = timedelta(hours=8)\n    SESSION_COOKIE_SECURE = False  # True apenas em HTTPS\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n</code></pre>"},{"location":"TROUBLESHOOTING/#problemas-de-deploy","title":"Problemas de Deploy","text":""},{"location":"TROUBLESHOOTING/#nginx-502-bad-gateway","title":"Nginx 502 Bad Gateway","text":"<p>Problema: Erro 502 no Nginx</p> <pre><code># Verificar se aplica\u00e7\u00e3o est\u00e1 rodando\ncurl http://localhost:5000/api/health\n\n# Verificar logs do Nginx\nsudo tail -f /var/log/nginx/error.log\n\n# Verificar logs da aplica\u00e7\u00e3o\nsudo tail -f /var/log/supervisor/scada.log\n\n# Reiniciar servi\u00e7os\nsudo supervisorctl restart scada\nsudo systemctl restart nginx\n</code></pre>"},{"location":"TROUBLESHOOTING/#permission-denied-issues","title":"Permission Denied Issues","text":"<p>Problema: Permiss\u00f5es incorretas em produ\u00e7\u00e3o</p> <pre><code># Corrigir propriedade dos arquivos\nsudo chown -R scada:scada /opt/scada\nsudo chmod -R 755 /opt/scada\nsudo chmod 600 /opt/scada/.env\n\n# Verificar logs de permiss\u00e3o\nsudo tail -f /var/log/auth.log | grep scada\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-tools-e-comandos-uteis","title":"\ud83d\udd0d Debug Tools e Comandos \u00dateis","text":""},{"location":"TROUBLESHOOTING/#verificacao-de-sistema","title":"Verifica\u00e7\u00e3o de Sistema","text":"<pre><code># Status geral dos servi\u00e7os\nsystemctl status nginx postgresql redis supervisor\n\n# Uso de recursos\ntop -u scada\nhtop\ndf -h\nfree -h\n\n# Conex\u00f5es de rede\nnetstat -tulpn | grep :5000\nnetstat -tulpn | grep :5432\nss -tulpn | grep scada\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-de-aplicacao","title":"Debug de Aplica\u00e7\u00e3o","text":"<pre><code># Debug mode no Flask\n# Em .env\nFLASK_ENV=development\nFLASK_DEBUG=1\n\n# Debug de SQL queries\n# Em app/config.py\nSQLALCHEMY_ECHO = True\n\n# Debug logging personalizado\nimport logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s %(name)s %(levelname)s: %(message)s'\n)\n</code></pre>"},{"location":"TROUBLESHOOTING/#comandos-de-banco-de-dados","title":"Comandos de Banco de Dados","text":"<pre><code># PostgreSQL\nsudo -u postgres psql scada_prod\n\n# Verificar tamanho das tabelas\nSELECT \n    schemaname,\n    tablename,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size\nFROM pg_tables \nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n\n# Verificar conex\u00f5es ativas\nSELECT * FROM pg_stat_activity WHERE datname = 'scada_prod';\n\n# SQLite (desenvolvimento)\nsqlite3 instance/scada.db\n.tables\n.schema user\nSELECT COUNT(*) FROM data_log;\n</code></pre>"},{"location":"TROUBLESHOOTING/#debug-de-protocolos","title":"Debug de Protocolos","text":"<pre><code># Test script para Modbus\n#!/usr/bin/env python3\nimport sys\nfrom pymodbus.client.sync import ModbusTcpClient\n\ndef test_modbus(host, port=502):\n    client = ModbusTcpClient(host, port=port)\n\n    if client.connect():\n        print(f\"\u2705 Conectado ao Modbus em {host}:{port}\")\n\n        # Testar diferentes tipos de registradores\n        tests = [\n            (\"Holding Registers\", lambda: client.read_holding_registers(0, 10, unit=1)),\n            (\"Input Registers\", lambda: client.read_input_registers(0, 10, unit=1)),\n            (\"Coils\", lambda: client.read_coils(0, 10, unit=1)),\n            (\"Discrete Inputs\", lambda: client.read_discrete_inputs(0, 10, unit=1)),\n        ]\n\n        for test_name, test_func in tests:\n            try:\n                result = test_func()\n                if not result.isError():\n                    print(f\"\u2705 {test_name}: OK\")\n                else:\n                    print(f\"\u274c {test_name}: {result}\")\n            except Exception as e:\n                print(f\"\u274c {test_name}: {e}\")\n\n        client.close()\n    else:\n        print(f\"\u274c N\u00e3o foi poss\u00edvel conectar ao Modbus em {host}:{port}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Uso: python test_modbus.py &lt;IP_DO_PLC&gt;\")\n        sys.exit(1)\n\n    test_modbus(sys.argv[1])\n</code></pre> <pre><code># Test script para S7\n#!/usr/bin/env python3\nimport sys\nimport snap7\n\ndef test_s7(host, rack=0, slot=1):\n    plc = snap7.client.Client()\n\n    try:\n        plc.connect(host, rack, slot)\n        print(f\"\u2705 Conectado ao S7 PLC em {host}\")\n\n        # Informa\u00e7\u00f5es do PLC\n        cpu_info = plc.get_cpu_info()\n        print(f\"CPU: {cpu_info}\")\n\n        # Testar leitura de diferentes \u00e1reas\n        tests = [\n            (\"DB1 (2 bytes)\", lambda: plc.db_read(1, 0, 2)),\n            (\"Inputs (1 byte)\", lambda: plc.read_area(snap7.types.S7AreaPE, 0, 0, 1)),\n            (\"Outputs (1 byte)\", lambda: plc.read_area(snap7.types.S7AreaPA, 0, 0, 1)),\n            (\"Merkers (1 byte)\", lambda: plc.read_area(snap7.types.S7AreaMK, 0, 0, 1)),\n        ]\n\n        for test_name, test_func in tests:\n            try:\n                result = test_func()\n                print(f\"\u2705 {test_name}: {len(result)} bytes lidos\")\n            except Exception as e:\n                print(f\"\u274c {test_name}: {e}\")\n\n    except Exception as e:\n        print(f\"\u274c Erro S7: {e}\")\n    finally:\n        plc.disconnect()\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Uso: python test_s7.py &lt;IP_DO_PLC&gt;\")\n        sys.exit(1)\n\n    test_s7(sys.argv[1])\n</code></pre>"},{"location":"TROUBLESHOOTING/#quando-pedir-ajuda","title":"\ud83d\udcde Quando Pedir Ajuda","text":""},{"location":"TROUBLESHOOTING/#informacoes-a-coletar","title":"Informa\u00e7\u00f5es a Coletar","text":"<p>Antes de reportar um problema, colete estas informa\u00e7\u00f5es:</p> <ol> <li>Vers\u00e3o do Sistema</li> </ol> <pre><code>python --version\npip list | grep -E \"(Flask|SQLAlchemy|pymodbus|snap7)\"\ncat /etc/os-release\n</code></pre> <ol> <li>Logs Relevantes</li> </ol> <pre><code># \u00daltimas 100 linhas de cada log\ntail -n 100 logs/app.log\ntail -n 100 /var/log/supervisor/scada.log\ntail -n 100 /var/log/nginx/error.log\n</code></pre> <ol> <li>Configura\u00e7\u00e3o</li> </ol> <pre><code># Configura\u00e7\u00e3o sanitizada (sem senhas)\ngrep -v \"PASSWORD\\|SECRET\\|KEY\" .env\n</code></pre> <ol> <li>Status dos Servi\u00e7os</li> </ol> <pre><code>systemctl status nginx postgresql redis supervisor\nsupervisorctl status\n</code></pre>"},{"location":"TROUBLESHOOTING/#canais-de-suporte","title":"Canais de Suporte","text":"<ul> <li>Issues no GitHub: Para bugs e feature requests</li> <li>Email: suporte@scada.local</li> <li>Documenta\u00e7\u00e3o: https://github.com/seu-usuario/CLP_TCC2/wiki</li> </ul>"},{"location":"TROUBLESHOOTING/#template-para-reportar-problemas","title":"Template para Reportar Problemas","text":"<pre><code>## Descri\u00e7\u00e3o do Problema\n[Descreva o problema detalhadamente]\n\n## Passos para Reproduzir\n1. [Primeiro passo]\n2. [Segundo passo]\n3. [Terceiro passo]\n\n## Comportamento Esperado\n[O que deveria acontecer]\n\n## Comportamento Atual\n[O que est\u00e1 acontecendo]\n\n## Ambiente\n- OS: [Ubuntu 20.04, CentOS 8, etc.]\n- Python: [3.8.10]\n- Flask: [2.3.3]\n- Browser: [Chrome 115, Firefox 116, etc.]\n\n## Logs\n</code></pre> <p>[Cole os logs relevantes aqui]</p> <pre><code>\n## Screenshots\n[Se aplic\u00e1vel, adicione screenshots]\n</code></pre> <p>Este guia de troubleshooting deve cobrir a maioria dos problemas comuns que voc\u00ea pode encontrar. Mantenha-o atualizado conforme novos problemas e solu\u00e7\u00f5es surgirem!</p>"}]}